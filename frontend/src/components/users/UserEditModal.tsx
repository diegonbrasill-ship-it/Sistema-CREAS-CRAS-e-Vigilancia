// frontend/src/components/users/UserEditModal.tsx

import { useEffect } from 'react';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { toast } from 'react-toastify';
import { updateUser, User } from '@/services/api'; 

import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Loader2 } from 'lucide-react';

const formSchema = z.object({
Â  nome_completo: z.string().min(3, "O nome completo Ã© obrigatÃ³rio."),
Â  cargo: z.string().min(3, "O cargo Ã© obrigatÃ³rio."),
Â  username: z.string().min(3, "O nome de usuÃ¡rio Ã© obrigatÃ³rio."),
Â  role: z.string().min(1, "O perfil Ã© obrigatÃ³rio."),
});
type FormData = z.infer<typeof formSchema>;

interface UserEditModalProps {
Â  user: User | null;
Â  isOpen: boolean;
Â  onClose: () => void;
Â  onSuccess: () => void;
}

// ðŸ“Œ Mapeamento dos Perfis ATUALIZADO com nÃ­veis de escolaridade (SUAS)
const PROFILE_OPTIONS = [
    { value: "tecnico_superior", label: "TÃ©cnico de NÃ­vel Superior" },
    { value: "tecnico_medio", label: "TÃ©cnico de NÃ­vel MÃ©dio" },
    { value: "coordenador", label: "Coordenador(a) da Unidade" },
    { value: "gestor", label: "SecretÃ¡rio(a) / Gestor Geral" },
    { value: "vigilancia", label: "VigilÃ¢ncia Socioassistencial" },
];

export default function UserEditModal({ user, isOpen, onClose, onSuccess }: UserEditModalProps) {
Â  const { register, handleSubmit, control, reset, formState: { errors, isSubmitting } } = useForm<FormData>({
Â  Â  resolver: zodResolver(formSchema),
Â  });

Â  useEffect(() => {
Â  Â  if (user) {
        // Mapeamento inverso para garantir que o valor interno (ex: 'tecnico') seja o valor do campo.
        // Se a role antiga for "tecnico", definiremos como "tecnico_superior" para o formulÃ¡rio.
        const mappedRole = user.role === 'tecnico' ? 'tecnico_superior' : user.role;
        
Â  Â  Â  reset({
Â  Â  Â  Â  nome_completo: user.nome_completo,
Â  Â  Â  Â  cargo: user.cargo,
Â  Â  Â  Â  username: user.username,
Â  Â  Â  Â  role: mappedRole, // Usando o valor mapeado
Â  Â  Â  });
Â  Â  }
Â  }, [user, reset]);

Â  const onSubmit = async (data: FormData) => {
Â  Â  if (!user) return;
    
    // Antes de enviar, o Back-end precisa entender o novo valor 'tecnico_superior'.
    // Felizmente, o Back-end estÃ¡ esperando o valor que o select envia ('tecnico_superior' ou 'tecnico_medio').
    
Â  Â  try {
Â  Â  Â  await updateUser(user.id, data); 
Â  Â  Â  toast.success(`Servidor atualizado com sucesso!`);
Â  Â  Â  onSuccess();
Â  Â  Â  onClose();
Â  Â  } catch (error: any) {
Â  Â  Â  toast.error(`Falha ao atualizar servidor: ${error.message}`);
Â  Â  }
Â  };

Â  if (!user) return null;

Â  return (
Â  Â  <Dialog open={isOpen} onOpenChange={onClose}>
Â  Â  Â  <DialogContent>
Â  Â  Â  Â  <DialogHeader>
Â  Â  Â  Â  Â  <DialogTitle>Editar Servidor: {user.nome_completo}</DialogTitle> 
Â  Â  Â  Â  Â  <DialogDescription>Altere as informaÃ§Ãµes do servidor abaixo. (Unidade: {user.unit_id})</DialogDescription> 
Â  Â  Â  Â  </DialogHeader>
Â  Â  Â  Â  <form onSubmit={handleSubmit(onSubmit)} className="space-y-4 py-4">
Â  Â  Â  Â  Â  Â  <div className="space-y-2"><Label htmlFor="nome_completo">Nome Completo</Label><Input id="nome_completo" {...register('nome_completo')} /><p className="text-sm text-red-500">{errors.nome_completo?.message}</p></div>
Â  Â  Â  Â  Â  Â  <div className="space-y-2"><Label htmlFor="cargo">Cargo/FunÃ§Ã£o</Label><Input id="cargo" {...register('cargo')} /><p className="text-sm text-red-500">{errors.cargo?.message}</p></div>
Â  Â  Â  Â  Â  Â  <div className="space-y-2"><Label htmlFor="username">Nome de UsuÃ¡rio</Label><Input id="username" {...register('username')} /><p className="text-sm text-red-500">{errors.username?.message}</p></div>
Â  Â  Â  Â  Â  Â  <div className="space-y-2">
Â  Â  Â  Â  Â  Â  Â  Â  <Label>Perfil</Label>
Â  Â  Â  Â  Â  Â  Â  Â  <Controller
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  control={control}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  name="role"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  render={({ field }) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Select onValueChange={field.onChange} value={field.value}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <SelectTrigger><SelectValue placeholder="Selecione o novo perfil..." /></SelectTrigger>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <SelectContent>
                                {/* ðŸ“Œ USO DO MAPEAMENTO DE NOMENCLATURA SUAS */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {PROFILE_OPTIONS.map(p => (<SelectItem key={p.value} value={p.value}>{p.label}</SelectItem>))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </SelectContent>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Select>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â <p className="text-sm text-red-500">{errors.role?.message}</p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <DialogFooter>
Â  Â  Â  Â  Â  Â  Â  Â  <Button type="button" variant="ghost" onClick={onClose}>Cancelar</Button>
Â  Â  Â  Â  Â  Â  Â  Â  <Button type="submit" disabled={isSubmitting}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Salvar AlteraÃ§Ãµes
Â  Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  </DialogFooter>
Â  Â  Â  Â  </form>
Â  Â  Â  </DialogContent>
Â  Â  </Dialog>
Â  );
}