// backend/src/routes/acompanhamentos.ts

import { Router } from "express";
import pool from "../db";
import { authMiddleware } from "../middleware/auth";
import { logAction } from "../services/logger";
import { unitAccessMiddleware } from "../middleware/unitAccess.middleware"; 
import { checkCaseAccess } from "../middleware/caseAccess.middleware"; 

const router = Router();

// ðŸ“Œ SOLUÃ‡ÃƒO DE LIMPEZA EXTREMA
const cleanSqlString = (sql: string): string => {
Â  Â  return sql.replace(/\s+/g, ' ').trim();
};


// Aplica a checagem de unidade para todas as rotas que dependem do casoId
// O middleware 'checkCaseAccess' abaixo farÃ¡ a checagem de unidade do caso.
router.use(authMiddleware, unitAccessMiddleware('casos', 'unit_id')); 


// =======================================================================
// ROTA PARA BUSCAR TODOS OS ACOMPANHAMENTOS DE UM CASO
// =======================================================================
router.get("/:casoId", checkCaseAccess('params', 'casoId'), async (req, res) => {
Â  Â  const { casoId } = req.params;
Â  Â  try {
Â  Â  Â  Â  // FIX: A query estÃ¡ correta e limpa, e o checkCaseAccess garante o acesso.
Â  Â  Â  Â  const query = cleanSqlString(`
Â  Â  Â  Â  Â  Â  SELECT a.*, u.username as "tecRef" 
Â  Â  Â  Â  Â  Â  FROM acompanhamentos a
Â  Â  Â  Â  Â  Â  JOIN users u ON a."userId" = u.id
Â  Â  Â  Â  Â  Â  WHERE a."casoId" = $1 
Â  Â  Â  Â  Â  Â  ORDER BY a.data DESC
Â  Â  Â  Â  `);
Â  Â  Â  Â  const result = await pool.query(query, [casoId]);
Â  Â  Â  Â  res.json(result.rows);
Â  Â  } catch (err: any) {
Â  Â  Â  Â  console.error("Erro ao buscar acompanhamentos:", err.message);
Â  Â  Â  Â  res.status(500).json({ message: "Erro ao buscar acompanhamentos." });
Â  Â  }
});

// =======================================================================
// ROTA PARA CRIAR UM NOVO ACOMPANHAMENTO
// =======================================================================
router.post("/:casoId", checkCaseAccess('params', 'casoId'), async (req, res) => {
Â  Â  const { casoId } = req.params;
Â  Â  const { texto } = req.body;
Â  Â  const userId = req.user!.id;
Â  Â  const userUnitId = req.user!.unit_id;

Â  Â  if (!texto) {
Â  Â  Â  Â  return res.status(400).json({ message: "O texto do acompanhamento Ã© obrigatÃ³rio." });
Â  Â  }

Â  Â  try {
Â  Â  Â  Â  const query = cleanSqlString(`
Â  Â  Â  Â  Â  Â  INSERT INTO acompanhamentos (texto, "casoId", "userId") VALUES ($1, $2, $3) RETURNING *
Â  Â  Â  Â  `);
Â  Â  Â  Â  const result = await pool.query(query, [texto, casoId, userId]);
Â  Â  Â  Â  const novoAcompanhamento = result.rows[0];

Â  Â  Â  Â  await logAction({ 
Â  Â  Â  Â  Â  Â  userId, 
Â  Â  Â  Â  Â  Â  username: req.user!.username, 
Â  Â  Â  Â  Â  Â  action: 'CREATE_ACOMPANHAMENTO', 
Â  Â  Â  Â  Â  Â  details: { casoId, acompanhamentoId: novoAcompanhamento.id, unitId: userUnitId }
Â  Â  Â  Â  });

Â  Â  Â  Â  res.status(201).json(novoAcompanhamento);
Â  Â  } catch (err: any) {
Â  Â  Â  Â  console.error("Erro ao salvar acompanhamento:", err.message);
Â  Â  Â  Â  res.status(500).json({ message: "Erro ao salvar acompanhamento." });
Â  Â  }
});

export default router;