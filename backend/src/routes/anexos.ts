// backend/src/routes/anexos.ts

import express, { Request, Response, NextFunction } from 'express';
import pool from '../db';
import { authMiddleware } from '../middleware/auth';
import upload from '../middleware/upload';
import { logAction } from '../services/logger';
import { unitAccessMiddleware } from '../middleware/unitAccess.middleware';
import { checkCaseAccess } from '../middleware/caseAccess.middleware';
import path from 'path';
import fs from 'fs';

const router = express.Router();

// ðŸ“Œ SOLUÃ‡ÃƒO DE LIMPEZA EXTREMA: Essencial para remover o erro 'syntax error at or near " "'
const cleanSqlString = (sql: string): string => {
    return sql.replace(/\s+/g, ' ').trim();
};

// Middleware auxiliar para checar acesso por anexo ID (usa o cleanSqlString)
async function checkAnexoAccess(req: Request, res: Response, next: NextFunction) {
Â  Â  const { id: anexoId } = req.params;
Â  Â  const accessFilter = req.accessFilter!;

Â  Â  try {
Â  Â  Â  Â  // 1. Busca o casoId associado ao anexo/demanda
Â  Â  Â  Â  const casoResultQuery = cleanSqlString('SELECT "casoId", "demandaId" FROM anexos WHERE id = $1');
Â  Â  Â  Â  const casoResult = await pool.query(casoResultQuery, [anexoId]);
Â  Â  Â  Â  
Â  Â  Â  Â  if (casoResult.rowCount === 0) {
Â  Â  Â  Â  Â  Â  return res.status(404).json({ message: 'Anexo nÃ£o encontrado.' });
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  const { casoId, demandaId } = casoResult.rows[0];
Â  Â  Â  Â  let idToCheck: string | number | null = casoId;

Â  Â  Â  Â  if (!idToCheck && demandaId) {
Â  Â  Â  Â  Â  Â  const demandaQuery = cleanSqlString('SELECT caso_associado_id FROM demandas WHERE id = $1');
Â  Â  Â  Â  Â  Â  const demandaResult = await pool.query(demandaQuery, [demandaId]);
Â  Â  Â  Â  Â  Â  idToCheck = demandaResult.rows[0]?.caso_associado_id;
Â  Â  Â  Â  }

Â  Â  Â  Â  if (!idToCheck) {
Â  Â  Â  Â  Â  Â  return res.status(403).json({ message: 'Acesso Proibido. Anexo sem vÃ­nculo de caso.' });
Â  Â  Â  Â  }

Â  Â  Â  Â  // 2. Checa a permissÃ£o de unidade para o caso (lÃ³gica do checkCaseAccess)
Â  Â  Â  Â  const params: (string | number)[] = [idToCheck]; 
Â  Â  Â  Â  let unitWhere = accessFilter.whereClause;
Â  Â  Â  Â  
Â  Â  Â  Â  if (accessFilter.params.length === 1) {
Â  Â  Â  Â  Â  Â  unitWhere = unitWhere.replace('$X', `$${params.length + 1}`);
Â  Â  Â  Â  Â  Â  params.push(accessFilter.params[0]);
Â  Â  Â  Â  } else if (accessFilter.params.length === 2) {
Â  Â  Â  Â  Â  Â  unitWhere = unitWhere.replace('$X', `$${params.length + 1}`).replace('$Y', `$${params.length + 2}`);
Â  Â  Â  Â  Â  Â  params.push(accessFilter.params[0], accessFilter.params[1]);
Â  Â  Â  Â  }

Â  Â  Â  Â  const checkQuery = cleanSqlString(`SELECT id FROM casos WHERE id = $1 AND ${unitWhere}`);
Â  Â  Â  Â  const checkResult = await pool.query(checkQuery, params);

Â  Â  Â  Â  if (checkResult.rowCount === 0) {
Â  Â  Â  Â  Â  Â  return res.status(403).json({ message: "Acesso Proibido. O anexo pertence a um caso fora da sua unidade de atuaÃ§Ã£o." });
Â  Â  Â  Â  }

Â  Â  Â  Â  (req as any).casoId = idToCheck;
Â  Â  Â  Â  next();

Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Erro na checagem de acesso de anexo:", error);
Â  Â  Â  Â  res.status(500).json({ message: "Erro de validaÃ§Ã£o de acesso ao anexo." });
Â  Â  }
}


// APLICAÃ‡ÃƒO GERAL DOS MIDDLEWARES DE SEGURANÃ‡A NA ROTA
router.use(authMiddleware, unitAccessMiddleware('casos', 'unit_id'));


// =======================================================================
// ROTA: Upload de anexo para um CASO
// =======================================================================
router.post(
Â  '/upload/caso/:casoId', 
Â  checkCaseAccess('params', 'casoId'), 
Â  upload.single('anexo'), 
Â  async (req: Request, res: Response) => {
Â  Â  
Â  Â  if (!req.file) {
Â  Â  Â  return res.status(400).json({ message: 'Nenhum arquivo foi enviado.' });
Â  Â  }

Â  Â  const { casoId } = req.params;
Â  Â  const { descricao } = req.body;
Â  Â  const { id: userId, username, unit_id: userUnitId } = req.user!;
Â  Â  const { originalname, filename, path: filePath, mimetype, size } = req.file;

Â  Â  try {
Â  Â  Â  const query = cleanSqlString(`
Â  Â  Â  Â  INSERT INTO anexos 
Â  Â  Â  Â  Â  ("casoId", "userId", "nomeOriginal", "nomeArmazenado", "caminhoArquivo", "tipoArquivo", "tamanhoArquivo", descricao)
Â  Â  Â  Â  VALUES 
Â  Â  Â  Â  Â  ($1, $2, $3, $4, $5, $6, $7, $8)
Â  Â  Â  Â  RETURNING id, "nomeOriginal";
Â  Â  Â  `);
Â  Â  Â  const result = await pool.query(query, [
Â  Â  Â  Â  casoId, userId, originalname, filename, filePath, mimetype, size, descricao
Â  Â  Â  ]);
Â  Â  Â  const novoAnexo = result.rows[0];

Â  Â  Â  await logAction({
Â  Â  Â  Â  userId,
Â  Â  Â  Â  username,
Â  Â  Â  Â  action: 'UPLOAD_CASE_ATTACHMENT',
Â  Â  Â  Â  details: { casoId, anexoId: novoAnexo.id, nomeArquivo: novoAnexo.nomeOriginal, unitId: userUnitId }
Â  Â  Â  });

Â  Â  Â  res.status(201).json({ message: 'Arquivo enviado com sucesso!', anexo: novoAnexo });
Â  Â  } catch (err: any) {
Â  Â  Â  console.error('Erro ao salvar informaÃ§Ãµes do anexo no banco de dados:', err.message);
Â  Â  Â  res.status(500).json({ message: 'Erro no servidor ao registrar o anexo.' });
Â  Â  }
Â  }
);

// =======================================================================
// ROTA: Upload de anexo para uma DEMANDA
// =======================================================================
router.post(
Â  Â  '/upload/demanda/:demandaId',
Â  Â  upload.single('anexo'),
Â  Â  async (req: Request, res: Response) => {
Â  Â  Â  Â  if (!req.file) {
Â  Â  Â  Â  Â  Â  return res.status(400).json({ message: 'Nenhum arquivo foi enviado.' });
Â  Â  Â  Â  }

Â  Â  Â  Â  const { demandaId } = req.params;
Â  Â  Â  Â  const { descricao } = req.body;
Â  Â  Â  Â  const { id: userId, username, unit_id: userUnitId } = req.user!;
Â  Â  Â  Â  const { originalname, filename, path: filePath, mimetype, size } = req.file;

Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const query = cleanSqlString(`
Â  Â  Â  Â  Â  Â  Â  Â  INSERT INTO anexos
Â  Â  Â  Â  Â  Â  Â  Â  Â  ("demandaId", "userId", "nomeOriginal", "nomeArmazenado", "caminhoArquivo", "tipoArquivo", "tamanhoArquivo", descricao)
Â  Â  Â  Â  Â  Â  Â  Â  VALUES
Â  Â  Â  Â  Â  Â  Â  Â  Â  ($1, $2, $3, $4, $5, $6, $7, $8)
Â  Â  Â  Â  Â  Â  Â  Â  RETURNING id, "nomeOriginal";
Â  Â  Â  Â  Â  Â  `);
Â  Â  Â  Â  Â  Â  const result = await pool.query(query, [
Â  Â  Â  Â  Â  Â  Â  Â  demandaId, userId, originalname, filename, filePath, mimetype, size, descricao
Â  Â  Â  Â  Â  Â  ]);
Â  Â  Â  Â  Â  Â  const novoAnexo = result.rows[0];

Â  Â  Â  Â  Â  Â  await logAction({
Â  Â  Â  Â  Â  Â  Â  Â  userId,
Â  Â  Â  Â  Â  Â  Â  Â  username,
Â  Â  Â  Â  Â  Â  Â  Â  action: 'UPLOAD_DEMAND_ATTACHMENT',
Â  Â  Â  Â  Â  Â  Â  Â  details: { demandaId, anexoId: novoAnexo.id, nomeArquivo: novoAnexo.nomeOriginal, unitId: userUnitId }
Â  Â  Â  Â  Â  Â  });

Â  Â  Â  Â  Â  Â  res.status(201).json({ message: 'Arquivo enviado com sucesso!', anexo: novoAnexo });
Â  Â  Â  Â  } catch (err: any) {
Â  Â  Â  Â  Â  Â  console.error(`Erro ao anexar arquivo Ã  demanda ${demandaId}:`, err.message);
Â  Â  Â  Â  Â  Â  res.status(500).json({ message: 'Erro no servidor ao registrar o anexo.' });
Â  Â  Â  Â  }
Â  Â  }
);


// =======================================================================
// ROTA para listar os anexos de um CASO
// =======================================================================
router.get('/casos/:casoId', checkCaseAccess('params', 'casoId'), async (req: Request, res: Response) => {
Â  const { casoId } = req.params;
Â  try {
Â  Â  const query = cleanSqlString(`
Â  Â  Â  SELECT
Â  Â  Â  Â  anex.id, anex."nomeOriginal", anex."tamanhoArquivo",
Â  Â  Â  Â  anex."dataUpload", anex.descricao, usr.username AS "uploadedBy"
Â  Â  Â  FROM anexos anex
Â  Â  Â  LEFT JOIN users usr ON anex."userId" = usr.id
Â  Â  Â  WHERE anex."casoId" = $1
Â  Â  Â  ORDER BY anex."dataUpload" DESC;
Â  Â  `);
Â  Â  const result = await pool.query(query, [casoId]);
Â  Â  res.json(result.rows);
Â  } catch (err: any) {
Â  Â  console.error(`Erro ao listar anexos para o caso ${casoId}:`, err.message);
Â  Â  res.status(500).json({ message: 'Erro ao buscar anexos.' });
Â  }
});

// =======================================================================
// ROTA para permitir o DOWNLOAD de um anexo
// =======================================================================
router.get('/download/:id', checkAnexoAccess, async (req: Request, res: Response) => {
Â  const { id } = req.params;
Â  const { id: userId, username, unit_id: userUnitId } = req.user!;
Â  Â  const casoId = (req as any).casoId; 

Â  try {
Â  Â  const query = cleanSqlString(`SELECT "caminhoArquivo", "nomeOriginal" FROM anexos WHERE id = $1`);
Â  Â  const result = await pool.query(query, [id]);

Â  Â  if (result.rowCount === 0) {
Â  Â  Â  return res.status(404).json({ message: 'Anexo nÃ£o encontrado.' });
Â  Â  }

Â  Â  const anexo = result.rows[0];
Â  Â  const filePath = path.resolve(anexo.caminhoArquivo);
Â  Â  
Â  Â  await logAction({
Â  Â  Â  Â  userId,
Â  Â  Â  Â  username,
Â  Â  Â  Â  action: 'DOWNLOAD_ATTACHMENT',
Â  Â  Â  Â  details: { anexoId: id, nomeArquivo: anexo.nomeOriginal, casoId, unitId: userUnitId }
Â  Â  });


Â  Â  if (fs.existsSync(filePath)) {
Â  Â  Â  res.download(filePath, anexo.nomeOriginal, (err) => {
Â  Â  Â  Â  if (err) {
Â  Â  Â  Â  Â  console.error('Erro durante o download do arquivo:', err);
Â  Â  Â  Â  }
Â  Â  Â  });
Â  Â  } else {
Â  Â  Â  console.error(`Arquivo nÃ£o encontrado no disco: ${filePath}`);
Â  Â  Â  res.status(404).json({ message: 'Arquivo nÃ£o encontrado no servidor.' });
Â  Â  }
Â  } catch (err: any) {
Â  Â  console.error(`Erro ao processar download do anexo ${id}:`, err.message);
Â  Â  res.status(500).json({ message: 'Erro ao processar download.' });
Â  }
});


export default router;