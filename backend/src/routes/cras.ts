// backend/src/routes/cras.ts 

import express, { Router, Request, Response } from "express";
import pool from "../db";
import { authMiddleware } from "../middleware/auth";
// Importamos unitAccessMiddleware, mas removemos ele do router.use para esta rota
import { unitAccessMiddleware } from "../middleware/unitAccess.middleware"; 

const router = express.Router();

// FunÃ§Ã£o de Limpeza SQL (Importada ou definida localmente)
const cleanSqlString = (sql: string): string => sql.replace(/\s+/g, ' ').trim();

// Aplicamos o authMiddleware (ObrigatÃ³rio)
router.use(authMiddleware); 

// ðŸ“Œ ROTA PRINCIPAL: GET /cras/casos (Listagem e Busca de ProntuÃ¡rio)
// ðŸ›‘ Implementa a SegregaÃ§Ã£o Estrita e Estabiliza a Listagem (Risco A/B.2) ðŸ›‘
// =======================================================================
router.get("/casos", async (req: Request, res: Response) => {
Â  Â  // Removemos a referÃªncia a 'req.accessFilter!' por ser obsoleta.
Â  Â  const user = (req as any).user;
Â  Â  
Â  Â  // ðŸ›‘ NOVO: Capturamos um filtro unitId da query (se o Gestor quer ver um CRAS especÃ­fico)
Â  Â  const { unitId: queryUnitId } = req.query as { unitId?: string };

Â  Â  const isGestorGeral = user.role.toLowerCase() === 'gestor';
Â  Â  const userUnitId = user.unit_id; // unit_id do usuÃ¡rio logado

Â  Â  let finalWhereClause = 'WHERE status = $1';
Â  Â  let finalParams: (string | number)[] = ['Ativo']; // Status sempre ativo
Â  Â  let paramIndex = 2; 

Â  Â  // 1. FILTRO BASE DE SEGURANÃ‡A (ImplementaÃ§Ã£o estrita por perfil)
Â  Â  if (!isGestorGeral) {
Â  Â  Â  Â  // UsuÃ¡rios Comuns (CREAS/CRAS)
Â  Â  Â  Â  if (userUnitId !== null) {
Â  Â  Â  Â  Â  Â  // Servidor CRAS/CREAS: VÃª APENAS os casos da sua unidade.
Â  Â  Â  Â  Â  Â  // A listagem CRAS Ã© primariamente para unidades CRAS (IDs 2, 3, 4, 5).
Â  Â  Â  Â  Â  Â  // Se for CREAS (ID 1), a listagem deve ser vazia (ou tratada em outra rota).
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // Filtro: O unit_id do caso deve ser igual ao unit_id do usuÃ¡rio
Â  Â  Â  Â  Â  Â  finalWhereClause += ` AND casos.unit_id = $${paramIndex++}`;
Â  Â  Â  Â  Â  Â  finalParams.push(userUnitId);
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  // UsuÃ¡rio comum sem lotaÃ§Ã£o: Acesso negado.
Â  Â  Â  Â  Â  Â  finalWhereClause += ' AND 1 = 0'; // ForÃ§a resultado vazio
Â  Â  Â  Â  }
Â  Â  }
Â  Â  // 2. FILTRO DO GESTOR GERAL (VisÃ£o total do CRAS com opÃ§Ã£o de Drill-Down)
Â  Â  else {
Â  Â  Â  Â  // OpÃ§Ã£o 2.1: Se o Gestor passou um unitId na query (clicou no submenu), filtra EXATAMENTE por ele.
Â  Â  Â  Â  if (queryUnitId) {
Â  Â  Â  Â  Â  Â  finalWhereClause += ` AND casos.unit_id = $${paramIndex++}`;
Â  Â  Â  Â  Â  Â  finalParams.push(queryUnitId);
Â  Â  Â  Â  }
Â  Â  Â  Â  // OpÃ§Ã£o 2.2: Se o Gestor estÃ¡ na tela de consulta geral (sem filtro na query), ele vÃª todos os CRAS + NULL.
Â  Â  Â  Â  else {
Â  Â  Â  Â  Â  Â  const crasIds = [2, 3, 4, 5];
Â  Â  Â  Â  Â  Â  // O gestor deve ver todos os CRAS (IDs 2,3,4,5) OU casos sem lotaÃ§Ã£o (NULL).
Â  Â  Â  Â  Â  Â  const placeholders = crasIds.map(() => `$${paramIndex++}`).join(', ');
Â  Â  Â  Â  Â  Â  finalWhereClause += ` AND (casos.unit_id IN (${placeholders}) OR casos.unit_id IS NULL)`;
Â  Â  Â  Â  Â  Â  finalParams.push(...crasIds);
Â  Â  Â  Â  }
Â  Â  }


Â  Â  // Campos a serem buscados para a listagem 
Â  Â  const baseFields = `id, "dataCad", "tecRef", nome, status, unit_id, dados_completos->>'bairro' AS bairro`;
Â  Â  
Â  Â  // Montagem da Query
Â  Â  const query = cleanSqlString(`
Â  Â  Â  Â  SELECT ${baseFields} 
Â  Â  Â  Â  FROM casos
Â  Â  Â  Â  ${finalWhereClause}
Â  Â  Â  Â  ORDER BY "dataCad" DESC
Â  Â  `);
Â  Â  
Â  Â  try {
Â  Â  Â  Â  // EXECUÃ‡ÃƒO DA QUERY COM OS PARÃ‚METROS CORRETOS 
Â  Â  Â  Â  const result = await pool.query(query, finalParams); 

Â  Â  Â  Â  res.json(result.rows); 

Â  Â  } catch (err: any) {
Â  Â  Â  Â  console.error("Erro ao listar casos do CRAS:", err.message);
Â  Â  Â  Â  res.status(500).json({ message: "Erro ao buscar casos do CRAS." });
Â  Â  }
});

export default router;