// backend/src/routes/encaminhamentos.ts

import express, { Router, Request, Response, NextFunction } from 'express';
import pool from '../db';
import { authMiddleware } from '../middleware/auth';
import { logAction } from '../services/logger';
import { unitAccessMiddleware } from '../middleware/unitAccess.middleware';
import { checkCaseAccess, checkItemAccessByParentCase } from '../middleware/caseAccess.middleware'; // ImportaÃ§Ãµes das checagens centralizadas

const router = express.Router();

// ðŸ“Œ SOLUÃ‡ÃƒO DE LIMPEZA EXTREMA: Essencial para remover o erro 'syntax error at or near " "'
const cleanSqlString = (sql: string): string => {
    return sql.replace(/\s+/g, ' ').trim();
};


// AplicaÃ§Ã£o do middleware de seguranÃ§a e filtro de unidade em todas as rotas
router.use(authMiddleware, unitAccessMiddleware('casos', 'unit_id')); 


/**
Â * @route Â  POST /api/encaminhamentos
Â * @desc Â  Â Cria um novo encaminhamento para um caso (Checa acesso ao casoId no body)
Â * @access Â Private
Â */
router.post('/', checkCaseAccess('body', 'casoId'), async (req: Request, res: Response) => {
Â  const userId = req.user!.id;
Â  const username = req.user!.username;
Â  const { casoId, servicoDestino, dataEncaminhamento, observacoes } = req.body;
  const userUnitId = req.user!.unit_id;
 
Â  if (!casoId || !servicoDestino || !dataEncaminhamento) {
Â  Â  return res.status(400).json({ message: 'Campos obrigatÃ³rios estÃ£o faltando.' });
Â  }

Â  try {
Â  Â  const query = cleanSqlString(`
Â  Â  Â  INSERT INTO encaminhamentos
Â  Â  Â  Â  ("casoId", "userId", "servicoDestino", "dataEncaminhamento", observacoes)
Â  Â  Â  VALUES
Â  Â  Â  Â  ($1, $2, $3, $4, $5)
Â  Â  Â  RETURNING id, "servicoDestino";
Â  Â  `);
Â  Â  const result = await pool.query(query, [ casoId, userId, servicoDestino, dataEncaminhamento, observacoes ]);
Â  Â  const novoEncaminhamento = result.rows[0];

Â  Â  await logAction({
Â  Â  Â  userId,
Â  Â  Â  username,
Â  Â  Â  action: 'CREATE_ENCAMINHAMENTO',
Â  Â  Â  details: { 
        casoId, 
        encaminhamentoId: novoEncaminhamento.id, 
        servico: novoEncaminhamento.servicoDestino,
        unitId: userUnitId 
      }
Â  Â  });

Â  Â  res.status(201).json({ 
Â  Â  Â  message: 'Encaminhamento registrado com sucesso!', 
Â  Â  Â  encaminhamento: novoEncaminhamento 
Â  Â  });
Â  } catch (err: any) {
Â  Â  console.error('Erro ao registrar encaminhamento:', err.message);
Â  Â  res.status(500).json({ message: 'Erro no servidor ao registrar encaminhamento.' });
Â  }
});

/**
Â * @route Â  PUT /api/encaminhamentos/:id
Â * @desc Â  Â Atualiza o status e/ou data de retorno de um encaminhamento (Checa acesso ao casoId via encaminhamentoId)
Â * @access Â Private
Â */
router.put('/:id', checkItemAccessByParentCase('id', 'encaminhamentos'), async (req: Request, res: Response) => { 
Â  const { id } = req.params;
Â  const { status, dataRetorno } = req.body;
Â  const { id: userId, username } = req.user!;
  const casoId = (req as any).casoId; // CasoId obtido do middleware

Â  if (!status) {
Â  Â  return res.status(400).json({ message: 'O novo status Ã© obrigatÃ³rio.' });
Â  }

Â  try {
Â  Â  const query = cleanSqlString(`
Â  Â  Â  UPDATE encaminhamentos
Â  Â  Â  SET 
Â  Â  Â  Â  status = $1,
Â  Â  Â  Â  "dataRetorno" = $2
Â  Â  Â  WHERE id = $3
Â  Â  Â  RETURNING id, "casoId", "servicoDestino";
Â  Â  `);
Â  Â  const result = await pool.query(query, [status, dataRetorno, id]);

Â  Â  if (result.rowCount === 0) {
        // Esta checagem Ã© redundante apÃ³s o middleware, mas mantida como fail-safe
Â  Â  Â  return res.status(404).json({ message: 'Encaminhamento nÃ£o encontrado.' }); 
Â  Â  }

Â  Â  const encaminhamentoAtualizado = result.rows[0];

Â  Â  await logAction({
Â  Â  Â  userId,
Â  Â  Â  username,
Â  Â  Â  action: 'UPDATE_ENCAMINHAMENTO_STATUS',
Â  Â  Â  details: {
Â  Â  Â  Â  casoId: casoId, 
Â  Â  Â  Â  encaminhamentoId: encaminhamentoAtualizado.id,
Â  Â  Â  Â  servico: encaminhamentoAtualizado.servicoDestino,
Â  Â  Â  Â  novoStatus: status,
        unitId: req.user!.unit_id 
Â  Â  Â  }
Â  Â  });

Â  Â  res.json({ message: 'Status do encaminhamento atualizado com sucesso!' });

Â  } catch (err: any) {
Â  Â  console.error(`Erro ao atualizar encaminhamento ${id}:`, err.message);
Â  Â  res.status(500).json({ message: 'Erro no servidor ao atualizar encaminhamento.' });
Â  }
});

// A rota GET /api/casos/:casoId/encaminhamentos estÃ¡ no casos.ts

export default router;